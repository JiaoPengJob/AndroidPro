package com.tch.zx.activity.contacts;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.net.Uri;
import android.os.Build;
import android.provider.MediaStore;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupWindow;
import android.widget.TextView;
import android.widget.Toast;

import com.tch.zx.R;
import com.tch.zx.activity.BaseActivity;
import com.tch.zx.util.HelperUtil;
import com.tch.zx.view.DynamicPhotoPopupWindow;
import com.tch.zx.view.FlowTagGroup;
import com.tch.zx.view.RewardPopupWindow;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * 发表朋友圈状态
 */
public class SendDynamicActivity extends BaseActivity {
    /**
     * 流式图片展示
     */
    @BindView(R.id.ftg_item_send_dynamic_img)
    FlowTagGroup ftg_item_send_dynamic_img;
    /**
     * 展示popup父布局
     */
    @BindView(R.id.ll_dynamic_parent_main)
    LinearLayout ll_dynamic_parent_main;

    /**
     * 需要发送的图片
     */
    private List<Bitmap> sendPhotos = new ArrayList<Bitmap>();

    /**
     * 设置popupwindow的布局参数
     */
    private WindowManager.LayoutParams params;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //去除标题栏,两种方式
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        if (getSupportActionBar() != null) {
            getSupportActionBar().hide();
        }
        setContentView(R.layout.activity_send_dynamic);
        ButterKnife.bind(this);

        initView();
    }

    /**
     * 初始化
     */
    private void initView() {
        setFTGImgData(sendPhotos);
    }

    /**
     * 加载图片
     */
    private void setFTGImgData(List<Bitmap> list) {
        ftg_item_send_dynamic_img.removeAllViews();
        ViewGroup.LayoutParams lp = new ViewGroup.LayoutParams(HelperUtil.getScreenWidth(this) / 5, HelperUtil.getScreenWidth(this) / 5);
        ViewGroup.MarginLayoutParams mlp = new ViewGroup.MarginLayoutParams(lp);
        mlp.setMargins(10, 10, 10, 10);

        for (int i = 0; i < list.size(); i++) {
            //默认存在添加图片的按钮
            ImageView imageView = new ImageView(this);
            imageView.setLayoutParams(mlp);
            imageView.setScaleType(ImageView.ScaleType.FIT_XY);
            imageView.setImageBitmap(list.get(i));
            ftg_item_send_dynamic_img.addView(imageView);
        }
        ImageView imgButton = new ImageView(this);
        imgButton.setLayoutParams(mlp);
        imgButton.setScaleType(ImageView.ScaleType.FIT_XY);
        imgButton.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.mipmap.add_image_icon));
        //添加图片的点击事件监听
        imgButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rewardInfo();
            }
        });
        ftg_item_send_dynamic_img.addView(imgButton);
    }

    /**
     * 选择图片
     */
    private void rewardInfo() {
        final DynamicPhotoPopupWindow rewardPopupWindow = new DynamicPhotoPopupWindow(this);
        //设置Popupwindow显示位置（从底部弹出）
        rewardPopupWindow.showAtLocation(ll_dynamic_parent_main, Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, 0);
        params = getWindow().getAttributes();
        //当弹出Popupwindow时，背景变半透明
        params.alpha = 0.7f;
        getWindow().setAttributes(params);
        //设置Popupwindow关闭监听，当Popupwindow关闭，背景恢复1f
        rewardPopupWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                params = getWindow().getAttributes();
                params.alpha = 1f;
                getWindow().setAttributes(params);
            }
        });

        rewardPopupWindow.getTv_popup_take_photo().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent1 = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                // 启动相机
                startActivityForResult(intent1, 60);
                rewardPopupWindow.dismiss();
            }
        });

        rewardPopupWindow.getTv_popup_choose_photo().setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(intent, 61);
            }
        });
    }

    /**
     * 取消
     */
    @OnClick(R.id.ll_return_send_dynamic)
    public void returnSendDynamic() {
        this.finish();
    }

    /**
     * 发送
     */
    @OnClick(R.id.tv_send_dynamic)
    public void sendDynamicHasSure() {

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK) {
            switch (requestCode) {
                case 60:
                    //通过这种方法取出的拍摄会默认压缩，因为如果相机的像素比较高拍摄出来的图会比较高清，
                    //如果图太大会造成内存溢出（OOM），因此此种方法会默认给图片尽心压缩
                    Bundle bundle = data.getExtras();
                    Bitmap bitmap = (Bitmap) bundle.get("data");
                    sendPhotos.add(bitmap);
                    setFTGImgData(sendPhotos);
                    break;
                case 61:
                    Uri uri = data.getData();
                    Cursor cursor = getContentResolver().query(uri, null, null, null, null);
                    if (cursor != null && cursor.moveToFirst()) {
                        String path = cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA));
                        Bitmap bm = BitmapFactory.decodeFile(path);
                        sendPhotos.add(bm);
                        setFTGImgData(sendPhotos);
                    }
                    break;
            }
        }
    }

}
