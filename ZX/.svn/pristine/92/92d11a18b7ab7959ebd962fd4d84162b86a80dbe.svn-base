package com.tch.zx.activity.mine.settings;

import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Window;
import android.view.WindowManager;
import android.widget.TextView;

import com.tch.zx.R;
import com.tch.zx.activity.BaseActivity;
import com.tch.zx.util.ConstantData;

import java.util.Timer;
import java.util.TimerTask;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * 更换手机号第二步
 */
public class ExchangePhoneNumberActivity extends BaseActivity {
    /**
     * 标题内容
     */
    @BindView(R.id.tv_title_top_all)
    TextView tv_title_top_all;
    /**
     * 获取验证码
     */
    @BindView(R.id.tv_getcode_exphone)
    TextView tv_getcode_exphone;

    /**
     * 获取验证码的时间间隔
     */
    private int minute = 60;

    /**
     * 计时器
     */
    private Timer timer;
    private TimerTask timerTask;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //去除标题栏,两种方式
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        if (getSupportActionBar() != null) {
            getSupportActionBar().hide();
        }
        setContentView(R.layout.activity_exchange_phone_number);
        ButterKnife.bind(this);

        initView();
    }

    /**
     * 初始化
     */
    private void initView() {
        tv_title_top_all.setText("更换手机号");
    }

    /**
     * 确定
     */
    @OnClick(R.id.bt_exchange_phone_done)
    public void donePhoneNum(){

    }

    /**
     * 返回
     */
    @OnClick(R.id.ll_return_back_top_all)
    public void returnExPhoneNext() {
        this.finish();
    }

    /**
     * 获取验证码
     */
    @OnClick(R.id.tv_getcode_exphone)
    public void getCodeExPhone() {
        timer = new Timer();
        timerTask = new TimerTask() {
            @Override
            public void run() {
                if (minute > 1) {
                    //发送消息给handler
                    handler.sendEmptyMessage(ConstantData.HANDLER_MESSAGE_CODE_REGISTER);
                    minute--;
                } else {
                    handler.sendEmptyMessage(ConstantData.HANDLER_MESSAGE_CODE_REGISTER_STOP);
                }
            }
        };
        timer.schedule(timerTask, 0, 1000);
    }

    /**
     * handler线程
     */
    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                //计时器运行
                case ConstantData.HANDLER_MESSAGE_CODE_REGISTER:
                    tv_getcode_exphone.setText(minute + "秒");
                    tv_getcode_exphone.setEnabled(false);
                    break;
                //计时器停止
                case ConstantData.HANDLER_MESSAGE_CODE_REGISTER_STOP:
                    clearTimer();
                    break;
            }
        }
    };

    /**
     * 清除计时器状态
     */
    private void clearTimer() {
        tv_getcode_exphone.setText("获取验证码");
        tv_getcode_exphone.setEnabled(true);
        minute = 60;

        if (timer != null) {
            timer.cancel();
            timer = null;
        }

        if (timerTask != null) {
            timerTask.cancel();
            timerTask = null;
        }

        if (handler != null) {
            handler.removeMessages(ConstantData.HANDLER_MESSAGE_CODE_REGISTER);
            handler = null;
        }
    }

    /**
     * Activity不可见状态
     */
    @Override
    protected void onPause() {
        super.onPause();
        clearTimer();
    }

    /**
     * Activity销毁状态
     */
    @Override
    protected void onDestroy() {
        super.onDestroy();
        clearTimer();
    }
}
