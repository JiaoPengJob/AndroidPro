package com.tch.zx.util;

import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Rect;
import android.net.Uri;
import android.provider.ContactsContract;
import android.text.TextUtils;
import android.view.View;
import android.view.ViewTreeObserver;

import com.tch.zx.bean.PeoplePhoneInfo;

import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

/**
 * 工具类
 */

public class HelperUtil {

    /**
     * 获取屏幕高度
     *
     * @param context
     * @return
     */
    public static int getScreenHeight(Context context) {
        if (context == null) {
            return 0;
        }
        return ((Activity) context).getWindowManager().getDefaultDisplay().getHeight();
    }

    /**
     * 获取屏幕宽度
     *
     * @param context
     * @return
     */
    public static int getScreenWidth(Context context) {
        if (context == null) {
            return 0;
        }
        return ((Activity) context).getWindowManager().getDefaultDisplay().getWidth();
    }

    /**
     * 是否是正确的手机号码
     *
     * @param mobiles
     * @return
     */
    public static boolean isMobileNO(String mobiles) {
        String telRegex = "[1][358]\\d{9}";
        if (TextUtils.isEmpty(mobiles)) return false;
        else return mobiles.matches(telRegex);
    }

    /**
     * 毫秒转换成时分秒
     *
     * @param time
     * @param type
     * @return
     */
    public static String timeFormat(long time, String type) {
        SimpleDateFormat formatter = new SimpleDateFormat(type);
        formatter.setTimeZone(TimeZone.getTimeZone("GMT+00:00"));
        return formatter.format(time);
    }

    /**
     * 拨打电话,调用页面,不拨出
     *
     * @param context
     * @param phoneNum
     */
    public static void callPhone(Context context, String phoneNum) {
        Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + phoneNum));
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);
    }

    /**
     * Bitmap转换成byte[]
     *
     * @param bitmap
     * @return
     */
    public static byte[] bmpToByteArray(Bitmap bitmap) {
        int bytes = bitmap.getByteCount();
        ByteBuffer buf = ByteBuffer.allocate(bytes);
        bitmap.copyPixelsToBuffer(buf);
        return buf.array();
    }

    /**
     * byte[]转换成Bitmap
     *
     * @param byteArray 数据
     * @param width     宽度
     * @param height    高度
     * @param config    图片类型
     * @return
     */
    public static Bitmap ByteArrayToBmp(byte[] byteArray, int width, int height, Bitmap.Config config) {
        Bitmap stitchBmp = Bitmap.createBitmap(width, height, config);

        stitchBmp.copyPixelsFromBuffer(ByteBuffer.wrap(byteArray));
        return stitchBmp;
    }

    /**
     * 设置输入框在输入法上面
     *
     * @param decorView
     * @param contentView
     * @return
     */
    public static ViewTreeObserver.OnGlobalLayoutListener getGlobalLayoutListener(final View decorView, final View contentView) {
        return new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                Rect r = new Rect();
                decorView.getWindowVisibleDisplayFrame(r);

                int height = decorView.getContext().getResources().getDisplayMetrics().heightPixels;
                int diff = height - r.bottom;

                if (diff != 0) {
                    if (contentView.getPaddingBottom() != diff) {
                        contentView.setPadding(0, 0, 0, diff);
                    }
                } else {
                    if (contentView.getPaddingBottom() != 0) {
                        contentView.setPadding(0, 0, 0, 0);
                    }
                }
            }
        };
    }

    /**
     * 获取通讯录信息
     *
     * @param context
     * @param uri
     * @return
     */
    public static PeoplePhoneInfo getPhoneContacts(Context context, Uri uri) {
        PeoplePhoneInfo info = new PeoplePhoneInfo();
        List<String> list = new ArrayList<String>();

        //得到ContentResolver对象
        ContentResolver cr = context.getContentResolver();
        //取得电话本中开始一项的光标
        Cursor cursor = cr.query(uri, null, null, null, null);
        if (cursor != null) {
            cursor.moveToFirst();
            //取得联系人姓名
            int nameFieldColumnIndex = cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME);
            info.setName(cursor.getString(nameFieldColumnIndex));
            //取得电话号码
            String ContactId = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts._ID));
            // 获得联系人的电话号码列表
            Cursor phoneCursor = context.getContentResolver().query(
                    ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                    null,
                    ContactsContract.CommonDataKinds.Phone.CONTACT_ID
                            + "=" + ContactId, null, null);
            if (phoneCursor.moveToFirst()) {
                do {
                    //遍历所有的联系人下面所有的电话号码
                    String phoneNumber = phoneCursor.getString(phoneCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
                    list.add(HelperUtil.dealPhoneNumber(phoneNumber));
                } while (phoneCursor.moveToNext());
            }
            info.setPhone(list);
            phoneCursor.close();
            cursor.close();
        } else {
            return null;
        }
        return info;
    }

    /**
     * 处理手机格式
     *
     * @param phone
     * @return
     */
    public static String dealPhoneNumber(String phone) {
        String str;
        str = phone.replace("-", "");
        str = str.replaceAll("\\s*", "");
        return str;
    }


}
