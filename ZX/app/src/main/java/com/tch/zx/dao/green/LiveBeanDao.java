package com.tch.zx.dao.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LIVE_BEAN".
*/
public class LiveBeanDao extends AbstractDao<LiveBean, Long> {

    public static final String TABLENAME = "LIVE_BEAN";

    /**
     * Properties of entity LiveBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppUserId = new Property(1, String.class, "appUserId", false, "APP_USER_ID");
        public final static Property AppUserName = new Property(2, String.class, "appUserName", false, "APP_USER_NAME");
        public final static Property LiveId = new Property(3, int.class, "liveId", false, "LIVE_ID");
        public final static Property LiveMoney = new Property(4, double.class, "liveMoney", false, "LIVE_MONEY");
        public final static Property LiveName = new Property(5, String.class, "liveName", false, "LIVE_NAME");
        public final static Property LivePepoleNum = new Property(6, String.class, "livePepoleNum", false, "LIVE_PEPOLE_NUM");
        public final static Property LivePicMax = new Property(7, String.class, "livePicMax", false, "LIVE_PIC_MAX");
        public final static Property LivePicMin = new Property(8, String.class, "livePicMin", false, "LIVE_PIC_MIN");
        public final static Property LiveStatus = new Property(9, String.class, "liveStatus", false, "LIVE_STATUS");
        public final static Property LiveTime = new Property(10, String.class, "liveTime", false, "LIVE_TIME");
        public final static Property LiveVideo = new Property(11, String.class, "liveVideo", false, "LIVE_VIDEO");
        public final static Property LiveViewNum = new Property(12, String.class, "liveViewNum", false, "LIVE_VIEW_NUM");
        public final static Property Position = new Property(13, String.class, "position", false, "POSITION");
        public final static Property UserPic = new Property(14, String.class, "userPic", false, "USER_PIC");
    }


    public LiveBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LiveBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LIVE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_USER_ID\" TEXT," + // 1: appUserId
                "\"APP_USER_NAME\" TEXT," + // 2: appUserName
                "\"LIVE_ID\" INTEGER NOT NULL ," + // 3: liveId
                "\"LIVE_MONEY\" REAL NOT NULL ," + // 4: liveMoney
                "\"LIVE_NAME\" TEXT," + // 5: liveName
                "\"LIVE_PEPOLE_NUM\" TEXT," + // 6: livePepoleNum
                "\"LIVE_PIC_MAX\" TEXT," + // 7: livePicMax
                "\"LIVE_PIC_MIN\" TEXT," + // 8: livePicMin
                "\"LIVE_STATUS\" TEXT," + // 9: liveStatus
                "\"LIVE_TIME\" TEXT," + // 10: liveTime
                "\"LIVE_VIDEO\" TEXT," + // 11: liveVideo
                "\"LIVE_VIEW_NUM\" TEXT," + // 12: liveViewNum
                "\"POSITION\" TEXT," + // 13: position
                "\"USER_PIC\" TEXT);"); // 14: userPic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LIVE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LiveBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appUserId = entity.getAppUserId();
        if (appUserId != null) {
            stmt.bindString(2, appUserId);
        }
 
        String appUserName = entity.getAppUserName();
        if (appUserName != null) {
            stmt.bindString(3, appUserName);
        }
        stmt.bindLong(4, entity.getLiveId());
        stmt.bindDouble(5, entity.getLiveMoney());
 
        String liveName = entity.getLiveName();
        if (liveName != null) {
            stmt.bindString(6, liveName);
        }
 
        String livePepoleNum = entity.getLivePepoleNum();
        if (livePepoleNum != null) {
            stmt.bindString(7, livePepoleNum);
        }
 
        String livePicMax = entity.getLivePicMax();
        if (livePicMax != null) {
            stmt.bindString(8, livePicMax);
        }
 
        String livePicMin = entity.getLivePicMin();
        if (livePicMin != null) {
            stmt.bindString(9, livePicMin);
        }
 
        String liveStatus = entity.getLiveStatus();
        if (liveStatus != null) {
            stmt.bindString(10, liveStatus);
        }
 
        String liveTime = entity.getLiveTime();
        if (liveTime != null) {
            stmt.bindString(11, liveTime);
        }
 
        String liveVideo = entity.getLiveVideo();
        if (liveVideo != null) {
            stmt.bindString(12, liveVideo);
        }
 
        String liveViewNum = entity.getLiveViewNum();
        if (liveViewNum != null) {
            stmt.bindString(13, liveViewNum);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(14, position);
        }
 
        String userPic = entity.getUserPic();
        if (userPic != null) {
            stmt.bindString(15, userPic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LiveBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appUserId = entity.getAppUserId();
        if (appUserId != null) {
            stmt.bindString(2, appUserId);
        }
 
        String appUserName = entity.getAppUserName();
        if (appUserName != null) {
            stmt.bindString(3, appUserName);
        }
        stmt.bindLong(4, entity.getLiveId());
        stmt.bindDouble(5, entity.getLiveMoney());
 
        String liveName = entity.getLiveName();
        if (liveName != null) {
            stmt.bindString(6, liveName);
        }
 
        String livePepoleNum = entity.getLivePepoleNum();
        if (livePepoleNum != null) {
            stmt.bindString(7, livePepoleNum);
        }
 
        String livePicMax = entity.getLivePicMax();
        if (livePicMax != null) {
            stmt.bindString(8, livePicMax);
        }
 
        String livePicMin = entity.getLivePicMin();
        if (livePicMin != null) {
            stmt.bindString(9, livePicMin);
        }
 
        String liveStatus = entity.getLiveStatus();
        if (liveStatus != null) {
            stmt.bindString(10, liveStatus);
        }
 
        String liveTime = entity.getLiveTime();
        if (liveTime != null) {
            stmt.bindString(11, liveTime);
        }
 
        String liveVideo = entity.getLiveVideo();
        if (liveVideo != null) {
            stmt.bindString(12, liveVideo);
        }
 
        String liveViewNum = entity.getLiveViewNum();
        if (liveViewNum != null) {
            stmt.bindString(13, liveViewNum);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(14, position);
        }
 
        String userPic = entity.getUserPic();
        if (userPic != null) {
            stmt.bindString(15, userPic);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LiveBean readEntity(Cursor cursor, int offset) {
        LiveBean entity = new LiveBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appUserName
            cursor.getInt(offset + 3), // liveId
            cursor.getDouble(offset + 4), // liveMoney
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // liveName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // livePepoleNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // livePicMax
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // livePicMin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // liveStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // liveTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // liveVideo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // liveViewNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // position
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // userPic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LiveBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLiveId(cursor.getInt(offset + 3));
        entity.setLiveMoney(cursor.getDouble(offset + 4));
        entity.setLiveName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLivePepoleNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLivePicMax(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLivePicMin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLiveStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLiveTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLiveVideo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLiveViewNum(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPosition(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserPic(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LiveBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LiveBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LiveBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
