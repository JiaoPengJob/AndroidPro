package com.tch.zx.dao.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMALL_BEAN".
*/
public class SmallBeanDao extends AbstractDao<SmallBean, Long> {

    public static final String TABLENAME = "SMALL_BEAN";

    /**
     * Properties of entity SmallBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppUserId = new Property(1, String.class, "appUserId", false, "APP_USER_ID");
        public final static Property AppUserName = new Property(2, String.class, "appUserName", false, "APP_USER_NAME");
        public final static Property AppUserPic = new Property(3, String.class, "appUserPic", false, "APP_USER_PIC");
        public final static Property AudioPath = new Property(4, String.class, "audioPath", false, "AUDIO_PATH");
        public final static Property ModuleClassName = new Property(5, String.class, "moduleClassName", false, "MODULE_CLASS_NAME");
        public final static Property Position = new Property(6, String.class, "position", false, "POSITION");
        public final static Property SignUpNum = new Property(7, String.class, "signUpNum", false, "SIGN_UP_NUM");
        public final static Property SmallClassId = new Property(8, int.class, "smallClassId", false, "SMALL_CLASS_ID");
        public final static Property SmallClassModuleId = new Property(9, int.class, "smallClassModuleId", false, "SMALL_CLASS_MODULE_ID");
        public final static Property SmallClassName = new Property(10, String.class, "smallClassName", false, "SMALL_CLASS_NAME");
        public final static Property SmallClassPicMax = new Property(11, String.class, "smallClassPicMax", false, "SMALL_CLASS_PIC_MAX");
        public final static Property SmallClassPicMin = new Property(12, String.class, "smallClassPicMin", false, "SMALL_CLASS_PIC_MIN");
        public final static Property TypeId = new Property(13, int.class, "typeId", false, "TYPE_ID");
        public final static Property TypeName = new Property(14, String.class, "typeName", false, "TYPE_NAME");
        public final static Property VideoMoney = new Property(15, double.class, "videoMoney", false, "VIDEO_MONEY");
        public final static Property VideoName = new Property(16, String.class, "videoName", false, "VIDEO_NAME");
        public final static Property VideoPath = new Property(17, String.class, "videoPath", false, "VIDEO_PATH");
        public final static Property ViewNum = new Property(18, String.class, "viewNum", false, "VIEW_NUM");
        public final static Property VideoId = new Property(19, String.class, "videoId", false, "VIDEO_ID");
    }


    public SmallBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SmallBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMALL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_USER_ID\" TEXT," + // 1: appUserId
                "\"APP_USER_NAME\" TEXT," + // 2: appUserName
                "\"APP_USER_PIC\" TEXT," + // 3: appUserPic
                "\"AUDIO_PATH\" TEXT," + // 4: audioPath
                "\"MODULE_CLASS_NAME\" TEXT," + // 5: moduleClassName
                "\"POSITION\" TEXT," + // 6: position
                "\"SIGN_UP_NUM\" TEXT," + // 7: signUpNum
                "\"SMALL_CLASS_ID\" INTEGER NOT NULL ," + // 8: smallClassId
                "\"SMALL_CLASS_MODULE_ID\" INTEGER NOT NULL ," + // 9: smallClassModuleId
                "\"SMALL_CLASS_NAME\" TEXT," + // 10: smallClassName
                "\"SMALL_CLASS_PIC_MAX\" TEXT," + // 11: smallClassPicMax
                "\"SMALL_CLASS_PIC_MIN\" TEXT," + // 12: smallClassPicMin
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 13: typeId
                "\"TYPE_NAME\" TEXT," + // 14: typeName
                "\"VIDEO_MONEY\" REAL NOT NULL ," + // 15: videoMoney
                "\"VIDEO_NAME\" TEXT," + // 16: videoName
                "\"VIDEO_PATH\" TEXT," + // 17: videoPath
                "\"VIEW_NUM\" TEXT," + // 18: viewNum
                "\"VIDEO_ID\" TEXT);"); // 19: videoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMALL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmallBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appUserId = entity.getAppUserId();
        if (appUserId != null) {
            stmt.bindString(2, appUserId);
        }
 
        String appUserName = entity.getAppUserName();
        if (appUserName != null) {
            stmt.bindString(3, appUserName);
        }
 
        String appUserPic = entity.getAppUserPic();
        if (appUserPic != null) {
            stmt.bindString(4, appUserPic);
        }
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(5, audioPath);
        }
 
        String moduleClassName = entity.getModuleClassName();
        if (moduleClassName != null) {
            stmt.bindString(6, moduleClassName);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(7, position);
        }
 
        String signUpNum = entity.getSignUpNum();
        if (signUpNum != null) {
            stmt.bindString(8, signUpNum);
        }
        stmt.bindLong(9, entity.getSmallClassId());
        stmt.bindLong(10, entity.getSmallClassModuleId());
 
        String smallClassName = entity.getSmallClassName();
        if (smallClassName != null) {
            stmt.bindString(11, smallClassName);
        }
 
        String smallClassPicMax = entity.getSmallClassPicMax();
        if (smallClassPicMax != null) {
            stmt.bindString(12, smallClassPicMax);
        }
 
        String smallClassPicMin = entity.getSmallClassPicMin();
        if (smallClassPicMin != null) {
            stmt.bindString(13, smallClassPicMin);
        }
        stmt.bindLong(14, entity.getTypeId());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(15, typeName);
        }
        stmt.bindDouble(16, entity.getVideoMoney());
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(17, videoName);
        }
 
        String videoPath = entity.getVideoPath();
        if (videoPath != null) {
            stmt.bindString(18, videoPath);
        }
 
        String viewNum = entity.getViewNum();
        if (viewNum != null) {
            stmt.bindString(19, viewNum);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(20, videoId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmallBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appUserId = entity.getAppUserId();
        if (appUserId != null) {
            stmt.bindString(2, appUserId);
        }
 
        String appUserName = entity.getAppUserName();
        if (appUserName != null) {
            stmt.bindString(3, appUserName);
        }
 
        String appUserPic = entity.getAppUserPic();
        if (appUserPic != null) {
            stmt.bindString(4, appUserPic);
        }
 
        String audioPath = entity.getAudioPath();
        if (audioPath != null) {
            stmt.bindString(5, audioPath);
        }
 
        String moduleClassName = entity.getModuleClassName();
        if (moduleClassName != null) {
            stmt.bindString(6, moduleClassName);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(7, position);
        }
 
        String signUpNum = entity.getSignUpNum();
        if (signUpNum != null) {
            stmt.bindString(8, signUpNum);
        }
        stmt.bindLong(9, entity.getSmallClassId());
        stmt.bindLong(10, entity.getSmallClassModuleId());
 
        String smallClassName = entity.getSmallClassName();
        if (smallClassName != null) {
            stmt.bindString(11, smallClassName);
        }
 
        String smallClassPicMax = entity.getSmallClassPicMax();
        if (smallClassPicMax != null) {
            stmt.bindString(12, smallClassPicMax);
        }
 
        String smallClassPicMin = entity.getSmallClassPicMin();
        if (smallClassPicMin != null) {
            stmt.bindString(13, smallClassPicMin);
        }
        stmt.bindLong(14, entity.getTypeId());
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(15, typeName);
        }
        stmt.bindDouble(16, entity.getVideoMoney());
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(17, videoName);
        }
 
        String videoPath = entity.getVideoPath();
        if (videoPath != null) {
            stmt.bindString(18, videoPath);
        }
 
        String viewNum = entity.getViewNum();
        if (viewNum != null) {
            stmt.bindString(19, viewNum);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(20, videoId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SmallBean readEntity(Cursor cursor, int offset) {
        SmallBean entity = new SmallBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appUserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appUserPic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // audioPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // moduleClassName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // position
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // signUpNum
            cursor.getInt(offset + 8), // smallClassId
            cursor.getInt(offset + 9), // smallClassModuleId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // smallClassName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // smallClassPicMax
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // smallClassPicMin
            cursor.getInt(offset + 13), // typeId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // typeName
            cursor.getDouble(offset + 15), // videoMoney
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // videoName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // videoPath
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // viewNum
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // videoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmallBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppUserPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAudioPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModuleClassName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPosition(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSignUpNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSmallClassId(cursor.getInt(offset + 8));
        entity.setSmallClassModuleId(cursor.getInt(offset + 9));
        entity.setSmallClassName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSmallClassPicMax(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSmallClassPicMin(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTypeId(cursor.getInt(offset + 13));
        entity.setTypeName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setVideoMoney(cursor.getDouble(offset + 15));
        entity.setVideoName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVideoPath(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setViewNum(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setVideoId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SmallBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SmallBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmallBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
