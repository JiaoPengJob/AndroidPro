package com.tch.zx.dao.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPECIAL_BEAN".
*/
public class SpecialBeanDao extends AbstractDao<SpecialBean, Long> {

    public static final String TABLENAME = "SPECIAL_BEAN";

    /**
     * Properties of entity SpecialBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppUserId = new Property(1, String.class, "appUserId", false, "APP_USER_ID");
        public final static Property AppUserName = new Property(2, String.class, "appUserName", false, "APP_USER_NAME");
        public final static Property AppUserPic = new Property(3, String.class, "appUserPic", false, "APP_USER_PIC");
        public final static Property Position = new Property(4, String.class, "position", false, "POSITION");
        public final static Property SpecialColumnByName = new Property(5, String.class, "specialColumnByName", false, "SPECIAL_COLUMN_BY_NAME");
        public final static Property SpecialColumnClassCreateDate = new Property(6, String.class, "specialColumnClassCreateDate", false, "SPECIAL_COLUMN_CLASS_CREATE_DATE");
        public final static Property SpecialColumnClassId = new Property(7, String.class, "specialColumnClassId", false, "SPECIAL_COLUMN_CLASS_ID");
        public final static Property SpecialColumnId = new Property(8, String.class, "specialColumnId", false, "SPECIAL_COLUMN_ID");
        public final static Property SpecialColumnName = new Property(9, String.class, "specialColumnName", false, "SPECIAL_COLUMN_NAME");
        public final static Property SpecialColumnPicMax = new Property(10, String.class, "specialColumnPicMax", false, "SPECIAL_COLUMN_PIC_MAX");
        public final static Property SpecialColumnPicMin = new Property(11, String.class, "specialColumnPicMin", false, "SPECIAL_COLUMN_PIC_MIN");
        public final static Property SpecialColumnPrice = new Property(12, String.class, "specialColumnPrice", false, "SPECIAL_COLUMN_PRICE");
        public final static Property SubscriptionNumber = new Property(13, String.class, "subscriptionNumber", false, "SUBSCRIPTION_NUMBER");
    }


    public SpecialBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SpecialBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPECIAL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"APP_USER_ID\" TEXT," + // 1: appUserId
                "\"APP_USER_NAME\" TEXT," + // 2: appUserName
                "\"APP_USER_PIC\" TEXT," + // 3: appUserPic
                "\"POSITION\" TEXT," + // 4: position
                "\"SPECIAL_COLUMN_BY_NAME\" TEXT," + // 5: specialColumnByName
                "\"SPECIAL_COLUMN_CLASS_CREATE_DATE\" TEXT," + // 6: specialColumnClassCreateDate
                "\"SPECIAL_COLUMN_CLASS_ID\" TEXT," + // 7: specialColumnClassId
                "\"SPECIAL_COLUMN_ID\" TEXT," + // 8: specialColumnId
                "\"SPECIAL_COLUMN_NAME\" TEXT," + // 9: specialColumnName
                "\"SPECIAL_COLUMN_PIC_MAX\" TEXT," + // 10: specialColumnPicMax
                "\"SPECIAL_COLUMN_PIC_MIN\" TEXT," + // 11: specialColumnPicMin
                "\"SPECIAL_COLUMN_PRICE\" TEXT," + // 12: specialColumnPrice
                "\"SUBSCRIPTION_NUMBER\" TEXT);"); // 13: subscriptionNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPECIAL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SpecialBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appUserId = entity.getAppUserId();
        if (appUserId != null) {
            stmt.bindString(2, appUserId);
        }
 
        String appUserName = entity.getAppUserName();
        if (appUserName != null) {
            stmt.bindString(3, appUserName);
        }
 
        String appUserPic = entity.getAppUserPic();
        if (appUserPic != null) {
            stmt.bindString(4, appUserPic);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        String specialColumnByName = entity.getSpecialColumnByName();
        if (specialColumnByName != null) {
            stmt.bindString(6, specialColumnByName);
        }
 
        String specialColumnClassCreateDate = entity.getSpecialColumnClassCreateDate();
        if (specialColumnClassCreateDate != null) {
            stmt.bindString(7, specialColumnClassCreateDate);
        }
 
        String specialColumnClassId = entity.getSpecialColumnClassId();
        if (specialColumnClassId != null) {
            stmt.bindString(8, specialColumnClassId);
        }
 
        String specialColumnId = entity.getSpecialColumnId();
        if (specialColumnId != null) {
            stmt.bindString(9, specialColumnId);
        }
 
        String specialColumnName = entity.getSpecialColumnName();
        if (specialColumnName != null) {
            stmt.bindString(10, specialColumnName);
        }
 
        String specialColumnPicMax = entity.getSpecialColumnPicMax();
        if (specialColumnPicMax != null) {
            stmt.bindString(11, specialColumnPicMax);
        }
 
        String specialColumnPicMin = entity.getSpecialColumnPicMin();
        if (specialColumnPicMin != null) {
            stmt.bindString(12, specialColumnPicMin);
        }
 
        String specialColumnPrice = entity.getSpecialColumnPrice();
        if (specialColumnPrice != null) {
            stmt.bindString(13, specialColumnPrice);
        }
 
        String subscriptionNumber = entity.getSubscriptionNumber();
        if (subscriptionNumber != null) {
            stmt.bindString(14, subscriptionNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SpecialBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appUserId = entity.getAppUserId();
        if (appUserId != null) {
            stmt.bindString(2, appUserId);
        }
 
        String appUserName = entity.getAppUserName();
        if (appUserName != null) {
            stmt.bindString(3, appUserName);
        }
 
        String appUserPic = entity.getAppUserPic();
        if (appUserPic != null) {
            stmt.bindString(4, appUserPic);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(5, position);
        }
 
        String specialColumnByName = entity.getSpecialColumnByName();
        if (specialColumnByName != null) {
            stmt.bindString(6, specialColumnByName);
        }
 
        String specialColumnClassCreateDate = entity.getSpecialColumnClassCreateDate();
        if (specialColumnClassCreateDate != null) {
            stmt.bindString(7, specialColumnClassCreateDate);
        }
 
        String specialColumnClassId = entity.getSpecialColumnClassId();
        if (specialColumnClassId != null) {
            stmt.bindString(8, specialColumnClassId);
        }
 
        String specialColumnId = entity.getSpecialColumnId();
        if (specialColumnId != null) {
            stmt.bindString(9, specialColumnId);
        }
 
        String specialColumnName = entity.getSpecialColumnName();
        if (specialColumnName != null) {
            stmt.bindString(10, specialColumnName);
        }
 
        String specialColumnPicMax = entity.getSpecialColumnPicMax();
        if (specialColumnPicMax != null) {
            stmt.bindString(11, specialColumnPicMax);
        }
 
        String specialColumnPicMin = entity.getSpecialColumnPicMin();
        if (specialColumnPicMin != null) {
            stmt.bindString(12, specialColumnPicMin);
        }
 
        String specialColumnPrice = entity.getSpecialColumnPrice();
        if (specialColumnPrice != null) {
            stmt.bindString(13, specialColumnPrice);
        }
 
        String subscriptionNumber = entity.getSubscriptionNumber();
        if (subscriptionNumber != null) {
            stmt.bindString(14, subscriptionNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SpecialBean readEntity(Cursor cursor, int offset) {
        SpecialBean entity = new SpecialBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appUserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appUserPic
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // position
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // specialColumnByName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // specialColumnClassCreateDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // specialColumnClassId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // specialColumnId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // specialColumnName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // specialColumnPicMax
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // specialColumnPicMin
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // specialColumnPrice
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // subscriptionNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SpecialBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppUserPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosition(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSpecialColumnByName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSpecialColumnClassCreateDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSpecialColumnClassId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSpecialColumnId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSpecialColumnName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSpecialColumnPicMax(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSpecialColumnPicMin(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpecialColumnPrice(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSubscriptionNumber(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SpecialBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SpecialBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SpecialBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
